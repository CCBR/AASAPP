{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"[M]ouse n[E]oan[T]igen p[R]edict[O]r (METRO) \u00b6 Cancer cells contain multiple genomic mutations. Some of the mutations are nonsynonymous and translated into changes in amino acid (AA) sequences of proteins. Fragments of the mutated proteins (peptides) presented by major histocompatibility complex (MHC) molecules to T cells are called neoantigens. Neoantigens do not exist in normal cells and are unique to cancer cells; therefore, they are recognized as foreign or non-self by T cells. Hence, they are potentially excellent targets for cancer immunotherapy. Syngeneic mouse tumor models are widely used to study tumor immunology and can be used to study neoantigen-targeted immunotherapies. The information on neoantigens needs to be obtained through the comprehensive mutation search of the cancer cell genome using a next-generation sequencer (NGS). NGS has become widely available and has made it possible to obtain mutational data easily. However, despite many data available, there are some hurdles to identifying murine neoantigens. The first is the selection of highly reliable genomic mutations from NGS data. Selecting neoantigen candidates from mutation annotation format (MAF) files requires some decent knowledge and experience in interpreting NGS data. The process is further complicated, especially when there are multiple biologically replicated data. The second is the conversion of a nucleic acid sequence into an AA sequence of a mutation. Using an accurate codon frame is critical to obtaining precise AA sequences. Manual AA conversion is highly time-consuming when there are tens or hundreds of candidate mutations. The third is the binding affinity prediction of each mutant peptide to MHC molecules. T cells cannot recognize any mutated peptides that cannot bind to MHC. Although there are tools for predicting the binding of peptides to MHC molecules, all candidate AA sequences should be entered into the web tool manually. Although there are multiple tools available in humans that can automatically perform these processes, there has been no tool for mice. Here, we developed a mouse cancer neoantigen prediction tool, METRO (Mouse nEoanTigen pRedictOr). This software selects the final murine neoantigen candidates in combination with existing analysis tools only by inputting the MAF files from NGS. METRO, which specializes in murine neoantigen research, will be of great benefit to researchers who have immunological knowledge but are not familiar with analyzing NGS mutational data. NOTE: METRO does not integrate the information on gene expression such as RNA-seq. Please confirm enough expression of the gene you selected as neoantigen candidates in your cancer cell line.","title":"Background"},{"location":"#mouse-neoantigen-predictor-metro","text":"Cancer cells contain multiple genomic mutations. Some of the mutations are nonsynonymous and translated into changes in amino acid (AA) sequences of proteins. Fragments of the mutated proteins (peptides) presented by major histocompatibility complex (MHC) molecules to T cells are called neoantigens. Neoantigens do not exist in normal cells and are unique to cancer cells; therefore, they are recognized as foreign or non-self by T cells. Hence, they are potentially excellent targets for cancer immunotherapy. Syngeneic mouse tumor models are widely used to study tumor immunology and can be used to study neoantigen-targeted immunotherapies. The information on neoantigens needs to be obtained through the comprehensive mutation search of the cancer cell genome using a next-generation sequencer (NGS). NGS has become widely available and has made it possible to obtain mutational data easily. However, despite many data available, there are some hurdles to identifying murine neoantigens. The first is the selection of highly reliable genomic mutations from NGS data. Selecting neoantigen candidates from mutation annotation format (MAF) files requires some decent knowledge and experience in interpreting NGS data. The process is further complicated, especially when there are multiple biologically replicated data. The second is the conversion of a nucleic acid sequence into an AA sequence of a mutation. Using an accurate codon frame is critical to obtaining precise AA sequences. Manual AA conversion is highly time-consuming when there are tens or hundreds of candidate mutations. The third is the binding affinity prediction of each mutant peptide to MHC molecules. T cells cannot recognize any mutated peptides that cannot bind to MHC. Although there are tools for predicting the binding of peptides to MHC molecules, all candidate AA sequences should be entered into the web tool manually. Although there are multiple tools available in humans that can automatically perform these processes, there has been no tool for mice. Here, we developed a mouse cancer neoantigen prediction tool, METRO (Mouse nEoanTigen pRedictOr). This software selects the final murine neoantigen candidates in combination with existing analysis tools only by inputting the MAF files from NGS. METRO, which specializes in murine neoantigen research, will be of great benefit to researchers who have immunological knowledge but are not familiar with analyzing NGS mutational data. NOTE: METRO does not integrate the information on gene expression such as RNA-seq. Please confirm enough expression of the gene you selected as neoantigen candidates in your cancer cell line.","title":" [M]ouse n[E]oan[T]igen p[R]edict[O]r (METRO)"},{"location":"METRO/build/","text":"2. Build Synposis \u00b6 The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command build shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./metro build [-h] --ref-fa REF_FA \\ --ref-gtf REF_GTF \\ --output OUTPUT This part of the documentation describes options and concepts for the ./metro build sub command in more detail. With minimal configuration, the build sub command enables you to build reference file. In its most basic form, ./metro build only has three required inputs . 2.1. Required Arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --ref-fa REF_FA Genomic FASTA file of the reference genome. type: file This file represents the genome sequence of the reference assembly in FASTA format. This input file should not be compressed. Sequence identifers in this file must match with sequence identifers in the GTF file provided to --ref-gtf . Example: --ref-fa GRCh38.primary_assembly.genome.fa --ref-gtf REF_GTF Gene annotation or GTF file for the reference genome. type: file This file represents the reference genome's gene annotation in GTF format. This input file should not be compressed. Sequence identifers (column 1) in this file must match with sequence identifers in the FASTA file provided to --ref-fa . Example: --ref-gtf gencode.v36.primary_assembly.annotation.gtf --output OUTPUT Output directory where reference files will be generated. type: path This location is where the build pipeline will create all of its output files. If the user-provided path does not exist, it will be created automatically. Example: --output /scratch/$USER/refs/hg38_v36/ 2.2 Optional Arguments \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 2.3 Example \u00b6 Build reference files for the run sub comamnd. # Step 0.) Grab an interactive node # Do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load cufflinks samtools # Step 1.) Build METRO reference files metro build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-gtf gencode.vM26.annotation.gtf \\ --output /scratch/ $USER /METRO/refs/","title":"Build"},{"location":"METRO/build/#2-build-synposis","text":"The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command build shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./metro build [-h] --ref-fa REF_FA \\ --ref-gtf REF_GTF \\ --output OUTPUT This part of the documentation describes options and concepts for the ./metro build sub command in more detail. With minimal configuration, the build sub command enables you to build reference file. In its most basic form, ./metro build only has three required inputs .","title":"2. Build Synposis"},{"location":"METRO/build/#21-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --ref-fa REF_FA Genomic FASTA file of the reference genome. type: file This file represents the genome sequence of the reference assembly in FASTA format. This input file should not be compressed. Sequence identifers in this file must match with sequence identifers in the GTF file provided to --ref-gtf . Example: --ref-fa GRCh38.primary_assembly.genome.fa --ref-gtf REF_GTF Gene annotation or GTF file for the reference genome. type: file This file represents the reference genome's gene annotation in GTF format. This input file should not be compressed. Sequence identifers (column 1) in this file must match with sequence identifers in the FASTA file provided to --ref-fa . Example: --ref-gtf gencode.v36.primary_assembly.annotation.gtf --output OUTPUT Output directory where reference files will be generated. type: path This location is where the build pipeline will create all of its output files. If the user-provided path does not exist, it will be created automatically. Example: --output /scratch/$USER/refs/hg38_v36/","title":"2.1. Required Arguments"},{"location":"METRO/build/#22-optional-arguments","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.2 Optional Arguments"},{"location":"METRO/build/#23-example","text":"Build reference files for the run sub comamnd. # Step 0.) Grab an interactive node # Do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load cufflinks samtools # Step 1.) Build METRO reference files metro build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-gtf gencode.vM26.annotation.gtf \\ --output /scratch/ $USER /METRO/refs/","title":"2.3 Example"},{"location":"METRO/find/","text":"4. Find Synopsis \u00b6 The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command find shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./metro find [-h] [--subset SUBSET] \\ --input INPUT [INPUT ...] \\ --transcripts TRANSCRIPTS \\ --output OUTPUT This part of the documentation describes options and concepts for ./metro find sub command in more detail. With minimal configuration, the find sub command enables you to start running metro pipeline. In its most basic form, ./metro find only has three required inputs . 4.1 Required Arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input MAF-like file(s) to process. type: file One or more MAF-like files can be provided. From the command-line, each input file should seperated by a space. Globbing is also supported! This makes selecting input files easier. Input MAF-like input files should be in an excel-like, CSV, or TSV format. For each input file a new output file will be generated in the specified output directory. Each file will end with the following extension: .metro.tsv . Example: --input data/*.xls* --output OUTPUT Path to an output directory. type: path This location is where the metro will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /scratch/$USER/RNA_hg38 --transcripts TRANSCRIPTS Transcriptomic FASTA file. type: file This reference file contains the sequence of each transcript in the reference genome. The file can be generated by running the build sub command, (i.e. /path/to/build/output/transcripts.fa). When creating this reference file, it is very important to use the same genomic FASTA and annotation file to call and annotate variants. Failure to use the correct reference file may result in multiple warnings and/or errors. Example: --transcripts transcripts.fa 4.2 Optional Arguments \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --subset SUBSET Subset resulting mutated amino acid sequences. type: int If defined, this option will obtain the mutated amino acid sequence (AAS) \u00b1 N amino acids of the mutation start site. By default, the first 30 upstream and downstream amino acids from the mutation site are recorded for non-frame shift mutations. Amino acids downstream of a frame shit mutation will be reported until the end of the amino acids sequence for the variants transcript or until the first reported terminating stop codon is found. Example: --subset 30 4.3 Example \u00b6 Find metro with the references files generated in the build example. ```bash Step 0.) Grab an interactive node \u00b6 Do not run on head node! \u00b6 srun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb --cpus-per-task=4 --pty bash module purge module load python/4.5 # Step 1.) Find METRO to find mutated protein products ./metro find --input /data/*.xlsx \\ --output /scratch/ \\(USER/METRO \\ --transcripts /scratch/\\) USER/METRO/refs/transcripts.fa \\ --subset 30 ``","title":"Find"},{"location":"METRO/find/#4-find-synopsis","text":"The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command find shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./metro find [-h] [--subset SUBSET] \\ --input INPUT [INPUT ...] \\ --transcripts TRANSCRIPTS \\ --output OUTPUT This part of the documentation describes options and concepts for ./metro find sub command in more detail. With minimal configuration, the find sub command enables you to start running metro pipeline. In its most basic form, ./metro find only has three required inputs .","title":"4. Find Synopsis"},{"location":"METRO/find/#41-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input MAF-like file(s) to process. type: file One or more MAF-like files can be provided. From the command-line, each input file should seperated by a space. Globbing is also supported! This makes selecting input files easier. Input MAF-like input files should be in an excel-like, CSV, or TSV format. For each input file a new output file will be generated in the specified output directory. Each file will end with the following extension: .metro.tsv . Example: --input data/*.xls* --output OUTPUT Path to an output directory. type: path This location is where the metro will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --output /scratch/$USER/RNA_hg38 --transcripts TRANSCRIPTS Transcriptomic FASTA file. type: file This reference file contains the sequence of each transcript in the reference genome. The file can be generated by running the build sub command, (i.e. /path/to/build/output/transcripts.fa). When creating this reference file, it is very important to use the same genomic FASTA and annotation file to call and annotate variants. Failure to use the correct reference file may result in multiple warnings and/or errors. Example: --transcripts transcripts.fa","title":"4.1 Required Arguments"},{"location":"METRO/find/#42-optional-arguments","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --subset SUBSET Subset resulting mutated amino acid sequences. type: int If defined, this option will obtain the mutated amino acid sequence (AAS) \u00b1 N amino acids of the mutation start site. By default, the first 30 upstream and downstream amino acids from the mutation site are recorded for non-frame shift mutations. Amino acids downstream of a frame shit mutation will be reported until the end of the amino acids sequence for the variants transcript or until the first reported terminating stop codon is found. Example: --subset 30","title":"4.2 Optional Arguments"},{"location":"METRO/find/#43-example","text":"Find metro with the references files generated in the build example. ```bash","title":"4.3 Example"},{"location":"METRO/find/#step-0-grab-an-interactive-node","text":"","title":"Step 0.) Grab an interactive node"},{"location":"METRO/find/#do-not-run-on-head-node","text":"srun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb --cpus-per-task=4 --pty bash module purge module load python/4.5 # Step 1.) Find METRO to find mutated protein products ./metro find --input /data/*.xlsx \\ --output /scratch/ \\(USER/METRO \\ --transcripts /scratch/\\) USER/METRO/refs/transcripts.fa \\ --subset 30 ``","title":"Do not run on head node!"},{"location":"METRO/getting-started/","text":"1. Getting Started \u00b6 1.1 Introduction \u00b6 METRO takes a VCF file(s) and performs filtering and pre-processing for the pipeline input. Then, an MAF-like file containing HGVS terms describing a given mutation and a FASTA file containing transcript sequences are used to determine the consequence of a mutation on a protein product. The build sub command can be used to generate a FASTA file containing CDS sequence of each transcript. The input sub command will merge and filter MAF files based on user-provided parameters. The run sub command will parse and tokenize HGVS terms describing coding DNA mutations. METRO supports each major class of HGVS terms encoding for coding DNA mutations: substitution, deletion, insertions, duplications, and INDELS. METRO does not support HGVS tokenization of terms describing mutations in non-exonic (or non-CDS) regions like introns, 3'-UTR or 5'-UTR. METRO will mutate a given coding DNA sequence based on the provided HGVS term and will translate that sequence into an amino acid sequence. METRO will also truncate a given amino acid sequence \u00b1 N amino acids relativve to a given mutation start site. The predict sub command will take the output of the run sub command and utilize netMHCpan to make predictions related to the mutations identified. In addition, it will filter and prepare outputs based on user-provided parameters. The following are sub-commands used within METRO: - build: build reference files - prepare: prepare input VAF files - find: find mutated protein products - predict: predict the binding of peptides to any MHC molecule 1.2 Setup METRO \u00b6 METRO has two dependencies: PYTHON and netMHCpan. These dependencies can be installed by a sysadmin. Before running the pipeline or any of the commands below, please ensure PYTHON and netMHCHPan are in your $PATH. In addition, the following PYTHON modules are required: - argparse - pandas - xlrd - numpy Please see follow the instructions below for getting started with the METRO pipeline. 1.2.1 Login to cluster \u00b6 # Setup Step 0.) ssh into cluster's head node # example below for Biowulf cluster ssh -Y $USER@biowulf.nih.gov 1.2.2 Grab an interactive node \u00b6 # Setup Step 1.) Please do not run METRO on the head node! # Grab an interactive node first srun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb --cpus-per-task=4 --pty bash 1.2.3 Load dependecies \u00b6 # Setup Step 2.) Add PYTHON executables to $PATH module purge module load METRO # Setup Step 3.) Add netMHCpan executables to $PATH # NOTE: If you do not have a bashrc file, create one first [TODO add netMHC pan path here] # Setup Step 4.) Download METRO and add to $PATH # Clone the METRO repository from Github git clone https://github.com/CCBR/METRO.git export PATH=${PWD}/METRO:${PATH}","title":"Getting Started"},{"location":"METRO/getting-started/#1-getting-started","text":"","title":"1. Getting Started"},{"location":"METRO/getting-started/#11-introduction","text":"METRO takes a VCF file(s) and performs filtering and pre-processing for the pipeline input. Then, an MAF-like file containing HGVS terms describing a given mutation and a FASTA file containing transcript sequences are used to determine the consequence of a mutation on a protein product. The build sub command can be used to generate a FASTA file containing CDS sequence of each transcript. The input sub command will merge and filter MAF files based on user-provided parameters. The run sub command will parse and tokenize HGVS terms describing coding DNA mutations. METRO supports each major class of HGVS terms encoding for coding DNA mutations: substitution, deletion, insertions, duplications, and INDELS. METRO does not support HGVS tokenization of terms describing mutations in non-exonic (or non-CDS) regions like introns, 3'-UTR or 5'-UTR. METRO will mutate a given coding DNA sequence based on the provided HGVS term and will translate that sequence into an amino acid sequence. METRO will also truncate a given amino acid sequence \u00b1 N amino acids relativve to a given mutation start site. The predict sub command will take the output of the run sub command and utilize netMHCpan to make predictions related to the mutations identified. In addition, it will filter and prepare outputs based on user-provided parameters. The following are sub-commands used within METRO: - build: build reference files - prepare: prepare input VAF files - find: find mutated protein products - predict: predict the binding of peptides to any MHC molecule","title":"1.1 Introduction"},{"location":"METRO/getting-started/#12-setup-metro","text":"METRO has two dependencies: PYTHON and netMHCpan. These dependencies can be installed by a sysadmin. Before running the pipeline or any of the commands below, please ensure PYTHON and netMHCHPan are in your $PATH. In addition, the following PYTHON modules are required: - argparse - pandas - xlrd - numpy Please see follow the instructions below for getting started with the METRO pipeline.","title":"1.2 Setup METRO"},{"location":"METRO/getting-started/#121-login-to-cluster","text":"# Setup Step 0.) ssh into cluster's head node # example below for Biowulf cluster ssh -Y $USER@biowulf.nih.gov","title":"1.2.1 Login to cluster"},{"location":"METRO/getting-started/#122-grab-an-interactive-node","text":"# Setup Step 1.) Please do not run METRO on the head node! # Grab an interactive node first srun -N 1 -n 1 --time=12:00:00 -p interactive --mem=8gb --cpus-per-task=4 --pty bash","title":"1.2.2 Grab an interactive node"},{"location":"METRO/getting-started/#123-load-dependecies","text":"# Setup Step 2.) Add PYTHON executables to $PATH module purge module load METRO # Setup Step 3.) Add netMHCpan executables to $PATH # NOTE: If you do not have a bashrc file, create one first [TODO add netMHC pan path here] # Setup Step 4.) Download METRO and add to $PATH # Clone the METRO repository from Github git clone https://github.com/CCBR/METRO.git export PATH=${PWD}/METRO:${PATH}","title":"1.2.3 Load dependecies"},{"location":"METRO/predict/","text":"5. Predict Synopsis \u00b6 The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command predict shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./ metro predict [-h] --mutationFile MUTATIONFILE \\ --alleleList ALLELELIST \\ --outputdir OUTPUTDIR \\ --outprefix OUTPREFIX \\ [--kmerLength KMERLENGTH] \\ [--peptideLength PEPTIDELENGTH] \\ [--highbind HIGHBIND] \\ [--lowbind LOWBIND] This part of the documentation describes options and concepts for ./metro input sub command in more detail. With minimal configuration, the predict sub command enables you to generate prediction files for each mutated sequence identified in the metro run sub command. 5.1 Required Arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --mutationFile MUTATIONFILE [MUTATIONFILE ...] Input TSV mutation file to process. type: file Input file in tsv format. This can be the output of the METRO run command Example: --mutationFile data/test_Variant.metro.tsv Required headers: Required header (in any order): - Variant_Classification - Hugo_Symbol - Transcript_ID - WT_Subset_AA_Sequence - Mutated_Subset_AA_Sequence --outputdir OUTPUTDIR Path to an output directory. type: path This location is where the metro will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --outputdir /scratch/$USER/RNA_hg38 --outputprefix OUTPUTPREFIX Output file prefix. type: prefix Prefix for sample output files. Example: --outputprefix test --alleleList ALLELELIST List of Alleles for netMHCpan input. type: list Allele name(s) to input into netMHCpan. If this is a list, each allele is separated by commas and without spaces (max 20 per submission). For full list of alleles is available on netMHC's website Example: --alleleList H-2-Ld,H-2-Dd,H-2-Kb 5.2 Optional Arguments \u00b6 Each of the following arguments are optional and do not need to be provided. Default values listed in each example will be used, if value not provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --kmerLength KMERLENGTH Length of kmer for netMHC input. type: numeric Single value, or list, of the length of peptide sequence used for prediction analysis. If this is a list, each length is separated by a comma and without spaces. Example: --peptideLength 8,9,10,11 --highbind HIGHBIND Threshold for identifying STRONG affinity. type: numeric Threshold to define binding affinity as \"STRONG\" for netHMC output. Must be an integer that is lower than --lowbind . Example: --highbind 0.5 --lowbind LOWBIND Filter for IMPACT values. type: numeric Threshold to define binding affinity as \"WEAK\" for netHMC output. Must be an integer that is higher than --highbind . Example: --lowbind 2 5.3 Example \u00b6 Predict the binding of peptides to any MHC molecule of known sequence using artificial neural networks (ANNs) and perform filtering of output based on user-provided parameters. # Step 0.) Grab an interactive node # Do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load python/3.5 # Step 1.) Run METRO predict to find the binding of peptides to any MHC molecule ./metro predict \\ --mutationFile /scratch/ $USER /METRO/test_Variant.asap.tsv \\ --allelList H-2-Ld,H-2-Dd,H-2-Kb \\ --peptideLength 8 ,9,10,11 \\ --kmerLength 21 \\ --outputdir /scratch/ $USER /METRO/ \\ --outprefix test","title":"Predict"},{"location":"METRO/predict/#5-predict-synopsis","text":"The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command predict shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./ metro predict [-h] --mutationFile MUTATIONFILE \\ --alleleList ALLELELIST \\ --outputdir OUTPUTDIR \\ --outprefix OUTPREFIX \\ [--kmerLength KMERLENGTH] \\ [--peptideLength PEPTIDELENGTH] \\ [--highbind HIGHBIND] \\ [--lowbind LOWBIND] This part of the documentation describes options and concepts for ./metro input sub command in more detail. With minimal configuration, the predict sub command enables you to generate prediction files for each mutated sequence identified in the metro run sub command.","title":"5. Predict Synopsis"},{"location":"METRO/predict/#51-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --mutationFile MUTATIONFILE [MUTATIONFILE ...] Input TSV mutation file to process. type: file Input file in tsv format. This can be the output of the METRO run command Example: --mutationFile data/test_Variant.metro.tsv Required headers: Required header (in any order): - Variant_Classification - Hugo_Symbol - Transcript_ID - WT_Subset_AA_Sequence - Mutated_Subset_AA_Sequence --outputdir OUTPUTDIR Path to an output directory. type: path This location is where the metro will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --outputdir /scratch/$USER/RNA_hg38 --outputprefix OUTPUTPREFIX Output file prefix. type: prefix Prefix for sample output files. Example: --outputprefix test --alleleList ALLELELIST List of Alleles for netMHCpan input. type: list Allele name(s) to input into netMHCpan. If this is a list, each allele is separated by commas and without spaces (max 20 per submission). For full list of alleles is available on netMHC's website Example: --alleleList H-2-Ld,H-2-Dd,H-2-Kb","title":"5.1 Required Arguments"},{"location":"METRO/predict/#52-optional-arguments","text":"Each of the following arguments are optional and do not need to be provided. Default values listed in each example will be used, if value not provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --kmerLength KMERLENGTH Length of kmer for netMHC input. type: numeric Single value, or list, of the length of peptide sequence used for prediction analysis. If this is a list, each length is separated by a comma and without spaces. Example: --peptideLength 8,9,10,11 --highbind HIGHBIND Threshold for identifying STRONG affinity. type: numeric Threshold to define binding affinity as \"STRONG\" for netHMC output. Must be an integer that is lower than --lowbind . Example: --highbind 0.5 --lowbind LOWBIND Filter for IMPACT values. type: numeric Threshold to define binding affinity as \"WEAK\" for netHMC output. Must be an integer that is higher than --highbind . Example: --lowbind 2","title":"5.2 Optional Arguments"},{"location":"METRO/predict/#53-example","text":"Predict the binding of peptides to any MHC molecule of known sequence using artificial neural networks (ANNs) and perform filtering of output based on user-provided parameters. # Step 0.) Grab an interactive node # Do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load python/3.5 # Step 1.) Run METRO predict to find the binding of peptides to any MHC molecule ./metro predict \\ --mutationFile /scratch/ $USER /METRO/test_Variant.asap.tsv \\ --allelList H-2-Ld,H-2-Dd,H-2-Kb \\ --peptideLength 8 ,9,10,11 \\ --kmerLength 21 \\ --outputdir /scratch/ $USER /METRO/ \\ --outprefix test","title":"5.3 Example"},{"location":"METRO/prepare/","text":"3. Prepare Synopsis \u00b6 The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command prepare shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./metro prepare [-h] --mafFiles MAFFILES \\ --outputdir OUTPUTdir \\ --outputprefix OUTPUTprefix \\ [--vafFilter VAFFILTER] \\ [--passFilter PASSFILTER] \\ [--impactFilter IMPACTFILTER] This part of the documentation describes options and concepts for ./metro prepare sub command in more detail. With minimal configuration, the prepare sub command enables you to create filtered MAF files for the metro run pipeline. 3.1 Required Arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --mafFiles MAFFILES [MAFFILES ...] Input MAF-like file(s) to process. type: file Input VCF file(s) in MAF format. Provide a minimum of two files, separated by a comma. Example: --mafFiles data/test1.maf,data/test2.maf --outputdir OUTPUTDIR Path to an output directory. type: path This location is where the metro will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --outputdir /scratch/$USER/RNA_hg38 --outputprefix OUTPUTPREFIX Output file prefix. type: prefix Prefix for sample output files. Example: --outputprefix test 3.2 Optional Arguments \u00b6 Each of the following arguments are optional and do not need to be provided. Default values listed in each example will be used, if value not provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --vafFilter VAFFilter Filter for VAF values. type: numeric Minimum value for average VAF, calculated as t_alt_count/t_depth, to be included. Example: --vafFilter 0.2 --passFilter PASSFILTER Filter for PASS values. type: numeric Minimum number of input files with a filter rating of \"PASS\", to be included. Example: --passFilter 2 --impactFilter IMPACTFILTER Filter for IMPACT values. type: numeric Minimum number of input files with an IMPACT rating of \"MODERATE\" or \"HIGH\", to be included. Example: --impactFilter 2 3.3 Example \u00b6 Filter MAF files in preparation of metro run. # Step 0.) Grab an interactive node # Do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load python/3.5 # Step 1.) Run METRO to find mutated protein products ./metro prepare --mafFiles /data/*.maf \\ --outputdir /scratch/ $USER /METRO \\ --outputprefix test \\ --vafFilter 0 .2 \\ --passFilter 2 \\ --impactFilter 2","title":"Prepare"},{"location":"METRO/prepare/#3-prepare-synopsis","text":"The ./metro executable is composed of several inter-related sub commands. Please see ./metro -h for all available options. The synopsis for the sub command prepare shows its parameters and their usage. Optional parameters are shown in square brackets. $ ./metro prepare [-h] --mafFiles MAFFILES \\ --outputdir OUTPUTdir \\ --outputprefix OUTPUTprefix \\ [--vafFilter VAFFILTER] \\ [--passFilter PASSFILTER] \\ [--impactFilter IMPACTFILTER] This part of the documentation describes options and concepts for ./metro prepare sub command in more detail. With minimal configuration, the prepare sub command enables you to create filtered MAF files for the metro run pipeline.","title":"3. Prepare Synopsis"},{"location":"METRO/prepare/#31-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --mafFiles MAFFILES [MAFFILES ...] Input MAF-like file(s) to process. type: file Input VCF file(s) in MAF format. Provide a minimum of two files, separated by a comma. Example: --mafFiles data/test1.maf,data/test2.maf --outputdir OUTPUTDIR Path to an output directory. type: path This location is where the metro will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be created automatically. Example: --outputdir /scratch/$USER/RNA_hg38 --outputprefix OUTPUTPREFIX Output file prefix. type: prefix Prefix for sample output files. Example: --outputprefix test","title":"3.1 Required Arguments"},{"location":"METRO/prepare/#32-optional-arguments","text":"Each of the following arguments are optional and do not need to be provided. Default values listed in each example will be used, if value not provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --vafFilter VAFFilter Filter for VAF values. type: numeric Minimum value for average VAF, calculated as t_alt_count/t_depth, to be included. Example: --vafFilter 0.2 --passFilter PASSFILTER Filter for PASS values. type: numeric Minimum number of input files with a filter rating of \"PASS\", to be included. Example: --passFilter 2 --impactFilter IMPACTFILTER Filter for IMPACT values. type: numeric Minimum number of input files with an IMPACT rating of \"MODERATE\" or \"HIGH\", to be included. Example: --impactFilter 2","title":"3.2 Optional Arguments"},{"location":"METRO/prepare/#33-example","text":"Filter MAF files in preparation of metro run. # Step 0.) Grab an interactive node # Do not run on head node! srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load python/3.5 # Step 1.) Run METRO to find mutated protein products ./metro prepare --mafFiles /data/*.maf \\ --outputdir /scratch/ $USER /METRO \\ --outputprefix test \\ --vafFilter 0 .2 \\ --passFilter 2 \\ --impactFilter 2","title":"3.3 Example"},{"location":"METRO/resources/","text":"argparse pandas xlrd numpy","title":"Resources"},{"location":"METRO/troubleshooting/","text":"** COMING SOON ** \u00b6","title":"Troubleshooting"},{"location":"METRO/troubleshooting/#coming-soon","text":"","title":"** COMING SOON **"}]}