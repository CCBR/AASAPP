#!/usr/bin/env python
# -*- coding: UTF-8 -*-

"""AASAP: Amino Acid Sequence Analysis Pipeline
About:
    This is the main entry for the AASAP pipeline.
USAGE:
	$ aasap <build|run> [OPTIONS]
Example:
    $ aasap build -h
    $ aasap run -h
"""

from __future__ import print_function
from src.utils import (initialize, 
    fatal,
    err,
    require,
    permissions) 
from src.mutator import (mutate,
    NonCodingVariantError,
    UnsupportedVariantTypeError,
    VariantParsingError,
    NonMatchingReferenceBases
    )
from src.reader import fasta, excel
import sys, os, subprocess
import argparse, textwrap

__author__ = 'Skyler Kuhn'
__version__ = 'v0.1.0'
__email__ = 'kuhnsa@nih.gov'


def bash(cmd, interpreter='/bin/bash', strict=True, **kwargs):
    """
    Interface to run a process or bash command. Using subprocess.call_check()
    due to portability across most python versions. It was introduced in python 2.5
    and it is also interoperabie across all python 3 versions. 
    @param cmd <str>:
        Shell command to run
    @param interpreter <str>:
        Interpreter for command to run [default: bash]
    @pararm strict <bool>:
        Prefixes any command with 'set -euo pipefail' to ensure process fail with
        the expected exit-code  
    @params kwargs <check_call()>:
        Keyword arguments to modify subprocess.check_call() behavior
    @return exitcode <int>:
        Returns the exit code of the run command, failures return non-zero exit codes
    """
    # Changes behavior of default shell
    prefix = ''
    # set -e: exit immediately upon error
    # set -u: treats unset variables as an error
    # set -o pipefail: exits if a error occurs in any point of a pipeline
    if strict: prefix = 'set -euo pipefail; '

    exitcode = subprocess.check_call(prefix + cmd, shell = True, executable = interpreter, **kwargs)

    if exitcode != 0: 
        fatal("""\n\tFatal: Failed to run '{}' command!
        └── Command returned a non-zero exitcode of '{}'.
        """.format(process, exitcode)
        )

    return exitcode


def build(sub_args):
    """Builds the reference files for the AAsap pipeline from a genomic FASTA
    file and a GTF file. Disclaimer: hybrid genomes not supported.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for build sub-command
    """
    # Initialize the output directory
    initialize(sub_args.output, links=[sub_args.ref_fa, sub_args.ref_gtf])
    
    # Check for required runtime dependencies
    # Build command needs samtools and gffread from cufflinks package
    require(cmds=["samtools", "gffread"], suggestions=["samtools", "cufflinks"])
    
    # Build Index for the Genomic FASTA file
    # samtools faidx ref.fa -fai-idx /path/to/ref.fa.fai
    process = "samtools faidx {} --fai-idx {}.fai".format(
        sub_args.ref_fa, 
        os.path.join(sub_args.output, os.path.basename(sub_args.ref_fa))
    )

    print("Running: " + process)
    exitcode = bash(process)

    # Extract transcript CDS sequences from reference FASTA file and GTF file
    # gffread -F -x /path/to/transcripts.fa -g genome.fa transcripts.gtf
    process = "gffread -F -x {} -g {} {}".format(
        os.path.join(sub_args.output, "transcripts.fa"),
        os.path.join(sub_args.output, os.path.basename(sub_args.ref_fa)),
        os.path.join(sub_args.output, os.path.basename(sub_args.ref_gtf))
    )

    print("Running: " + process)
    exitcode = bash(process)


def run(sub_args):
    """Runs the Amino Acid sequence analysis pipeline to determine 
    the consequence of a mutation on a protein product. Obtains the 
    mutated amino acid sequence for a given variant.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for run sub-command
    """
    print(sub_args)

    # Create dictionary to map transcript ID to its sequence
    transcriptome = {}
    for sid, sequence in fasta(sub_args.transcripts):
        # Grab the transcipt id and remove the version suffix
        transcript_id = sid.split(' ')[0].split('.')[0]
        transcriptome[transcript_id] = sequence
    
    for file in sub_args.input:
        print('Opening {}'.format(file))
        df = excel(file, subset=['Transcript_ID','HGVSc','Hugo_Symbol', 'Gene'])
        
        for i,row in df.iterrows():
            transcript = str(row['Transcript_ID'])
            hgvs = str(row['HGVSc'])
            if (hgvs and hgvs != 'nan') and (transcript and transcript != 'nan'):
                try:
                    sequence = transcriptome[transcript]
                except KeyError:
                    err("{} {}".format("WARNING: Transcript {} not found in provided transcripts FASTA file!".format(transcript),
                    "Please verify the correct reference file is provided!"))
                    continue # Skip over un-annotated transcript
                try:
                    print(i,transcript, hgvs)
                    mutated = mutate(sequence, hgvs)
                    print(hgvs, sequence,'\t', mutated)
                except NonCodingVariantError as e: pass 
                except UnsupportedVariantTypeError as e: pass
                except VariantParsingError as e: pass
                except NonMatchingReferenceBases as e: pass


def parsed_arguments():
    """Parses user-provided command-line arguments. Requires argparse and textwrap
    package. argparse was added to standard lib in python 3.2 and textwrap was added
    in python 3.5. To create custom help formatting for subparsers a docstring is
    used create the help message for required options. argparse does not support named
    subparser groups, which is normally what would be used to accomphish this reformatting.
    As so, the help message for require options must be suppressed. If a new required arg
    is added to a subparser, it must be added to the docstring and the usage statement
    also must be updated.
    """

    # Create a top-level parser
    parser = argparse.ArgumentParser(description = 'AASAP: \
                                                    Amino Acid Sequence Analysis Pipeline')

    # Adding Verison information
    parser.add_argument('--version', action = 'version', version='%(prog)s {}'.format(__version__))

    # Create sub-command parser
    subparsers = parser.add_subparsers(help='List of available sub-commands')
    
    # Options for the "build" sub-command
    # Grouped sub-parser arguments are currently not supported.
    # https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_build_options = textwrap.dedent("""\
        usage: aasap build [-h] --ref-fa REF_FA 
                                --ref-gtf REF_GTF
                                --output OUTPUT

        Builds reference files for the Amino Acid sequence analysis pipeline 
        from a genomic FASTA file and an annotation in GTF format. The build 
        sub command creates a FASTA file containing the sequence of each 
        transcript. 

        required arguments:
          --ref-fa REF_FA       Genomic FASTA file of the reference genome.

          --ref-gtf REF_GTF     GTF file for the reference genome.

          --output OUTPUT       Path to an output directory. This path
                                is where the pipeline will create all 
                                of its output files. If the provided 
                                output directory does not exist, it 
                                will be created. After the build sub
                                command completes, the transcripts.fa 
                                transcriptomic FASTA file can be used
                                or supplied to the run sub command.
        """)

    # Display example usage in epilog
    build_epilog = textwrap.dedent("""\
        example:
          # Step 1.) Grab an interactive node (do not run on head node)
          sinteractive --mem=8g --cpus-per-task=4
          module purge
          module load cuffdiff samtools

          # Step 2.) Build AASAP reference files
          aasap build --ref-fa GRCm39.primary_assembly.genome.fa \\
                      --ref-gtf gencode.vM26.annotation.gtf \\
                      --output /scratch/$USER/AASAP/refs/

        version:
          {}
        """.format(__version__))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_build = subparsers.add_parser('build',
                                            help = 'Builds the reference files for the AASAP.',
                                            usage = argparse.SUPPRESS,
                                            formatter_class=argparse.RawDescriptionHelpFormatter,
                                            description = required_build_options,
                                            epilog = build_epilog)
    # Input Genomic FASTA file
    subparser_build.add_argument('--ref-fa',
                                # Check if the file exists and if it is readable
                                type = lambda file: permissions(parser, file, os.R_OK),
                                required = True,
                                help = argparse.SUPPRESS)
    # Input Reference GTF file
    subparser_build.add_argument('--ref-gtf',
                                # Check if the file exists and if it is readable
                                type = lambda file: permissions(parser, file, os.R_OK),
                                required = True,
                                help = argparse.SUPPRESS)
    # Output Directory (build working directory)
    subparser_build.add_argument('--output',
                                type = lambda option: os.path.abspath(os.path.expanduser(option)),
                                required = True,
                                help = argparse.SUPPRESS)

    # Options for the "run" sub-command
    # Grouped sub-parser arguments are currently not supported by argparse.
    # https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_run_options = textwrap.dedent("""\
        usage: aasap run [-h] --input INPUT [INPUT ...]
                              --transcripts TRANSCRIPTS
                              --output OUTPUT
                              [--subset SUBSET]

        Runs the Amino Acid sequence analysis pipeline with reference files generated 
        from the build sub command to determine the consequence of a mutation on a 
        protein product. The run sub command takes a VCF-like or MAF-like file and 
        a FASTA file containing transcript sequences. 

        required arguments:
          --input INPUT [INPUT ...]
                           Input VCF-like or MAF-like files to process. One or more 
                           files can be provided. A mutated amino acid sequence will 
                           be generated for each variant in the supplied input file.
                           Example: --input data/*.xlsx
          --transcripts TRANSCRIPTS
                           Transcriptomic FASTA file. This reference file contains 
                           the sequence of each transcript in the reference genome. 
                           The file can be generated by running the build sub command. 
                           When creating this reference file, it is very important to 
                           use the same genomic FASTA and annotation file to call and 
                           annotate variants.
                           Example: --transcripts transcripts.fa 
          --output OUTPUT
                           Path to an output directory. This path is where the pipeline
                           will create all of its output files. If the provided output 
                           directory does not exist, it will be created. 
                           Example: --output /scratch/$USER/AASAP/
        """)

    # Display example usage in epilog
    run_epilog = textwrap.dedent("""\
        example:
          # Step 1.) Grab an interactive node (do not run on head node)
          sinteractive --mem=8g --cpus-per-task=4
          module purge
          module load python/3.5

          # Step 2.) Run AASAP to find mutated protein products
          ./aasap run --input  data/*.xlsx \\
                         --output /scratch/$USER/AASAP \\
                         --transcripts transcripts.fa \\
                         --subset 30

        version:
          {}
        """.format(__version__))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_run = subparsers.add_parser('run',
                                            help = 'Run AASAP against called variants.',
                                            usage = argparse.SUPPRESS,
                                            formatter_class=argparse.RawDescriptionHelpFormatter,
                                            description = required_run_options,
                                            epilog  = run_epilog)
    # Input FastQ files
    subparser_run.add_argument('--input',
                                # Check if the file exists and if it is readable
                                type = lambda file: permissions(parser, file, os.R_OK),
                                required = True,
                                nargs = '+',
                                help = argparse.SUPPRESS)
    # Output Directory (analysis working directory)
    subparser_run.add_argument('--output',
                                type = lambda option: os.path.abspath(os.path.expanduser(option)),
                                required = True,
                                help = argparse.SUPPRESS)
    # Reference Transcriptome
    subparser_run.add_argument('--transcripts',
                                # Check if the file exists and if it is readable
                                type = lambda file: permissions(parser, file, os.R_OK),
                                required = True,
                                help = argparse.SUPPRESS)
    # Obtain the mutated amino acid sequence(AAS) +- N amino acids of the mutated amino acid.
    subparser_run.add_argument('--subset',
                                type = int,
                                required = False,
                                help = 'Subset resulting mutated amino acid sequence. \
                                        If defined, this option will obtain the mutated \
                                        amino acid sequence (AAS) +/- N amino acids of the mutation. \
                                        By default, the entire sequence of the mutated amino acid \
                                        is found or generated. \
                                        Example: --subset 30')

    # Sanity check for user command line arguments 
    if len(sys.argv) < 2:
        parser.error("""\n\t └── Fatal: failed to provide a valid sub command to aasap!
             Please run 'aasap  -h' to view more information about aasap's usage.""".format(
                sys.argv[0])
        )

    # Define handlers for each sub-parser
    subparser_build.set_defaults(func = build)
    subparser_run.set_defaults(func = run)

    # Parse command-line args
    args = parser.parse_args()
    return args


def main():

    # Collect args for sub-command
    args = parsed_arguments()

    # Display version information
    print('AASAP ({})'.format(__version__))

    # Mediator method to call sub-command's set handler function
    args.func(args)


if __name__ == '__main__':
    main()